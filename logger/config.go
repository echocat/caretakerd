package logger

import (
	"github.com/echocat/caretakerd/values"
)

var defaults = map[string]interface{}{
	"Level":        Info,
	"StdoutLevel":  Info,
	"StderrLevel":  Error,
	"Filename":     values.String("console"),
	"MaxSizeInMb":  values.NonNegativeInteger(500),
	"MaxBackups":   values.NonNegativeInteger(5),
	"MaxAgeInDays": values.NonNegativeInteger(1),
	"Pattern":      Pattern("%d{YYYY-MM-DD HH:mm:ss} [%-5.5p] [%c] %m%n%P{%m}"),
}

// # Description
//
// A logger handles every output generated by the daemon itself, the process or other parts controlled by the daemon.
type Config struct {
	// @default info
	//
	// Minimal log level the logger uses to log error messages. All levels below are ignored.
	Level Level `json:"level" yaml:"level"`

	// @default info
	//
	// If the service prints something to ``stdout``, the instance will be logged with the corresponding instance level.
	StdoutLevel Level `json:"stdoutLevel" yaml:"stdoutLevel"`

	// @default error
	//
	// If the service prints something to ``stderr``, the instance will be logged with the corresponding instance level.
	StderrLevel Level `json:"stderrLevel" yaml:"stderrLevel"`

	// @default "console"
	//
	// Target file of the logger. The file will be created if it does not exist - but not the parent directory.
	//
	// If the instance value is set to ``console``, the whole output will go to ``stdout`` or to ``stderr`` on every log level
	// above or equal to {@ref .Level#Warning warning}.
	Filename values.String `json:"filename" yaml:"filename"`

	// @default 500
	//
	// Maximum size in megabytes of the log file before it gets rotated.
	//
	// This is ignored if {@ref #Filename filename} is set to ``console``.
	MaxSizeInMb values.NonNegativeInteger `json:"maxSizeInMb" yaml:"maxSizeInMb"`

	// @default 500
	//
	// Maximum number of old log files to retain.
	//
	// This is ignored if {@ref #Filename filename} is set to ``console``.
	MaxBackups values.NonNegativeInteger `json:"maxBackups" yaml:"maxBackups"`

	// @default 1
	//
	// Maximum number of days to retain old log files based on the
	// timestamp encoded in their filename.  Note that a day is defined as 24
	// hours and may not exactly correspond to calendar days due to daylight
	// savings, leap seconds etc.
	//
	// This is ignored if {@ref #Filename filename} is set to ``console``.
	MaxAgeInDays values.NonNegativeInteger `json:"maxAgeInDays" yaml:"maxAgeInDays"`

	// @default "%d{YYYY-MM-DD HH:mm:ss} [%-5.5p] [%c] %m%n%P{%m}"
	//
	// Pattern how to format the log messages to output with.
	Pattern Pattern `json:"pattern" yaml:"pattern"`
}

// NewConfig creates a new instance of Config.
func NewConfig() Config {
	result := Config{}
	result.init()
	return result
}

// Validate validates action on this object and return an error object if there are any.
func (instance Config) Validate() error {
	err := instance.StdoutLevel.Validate()
	if err == nil {
		err = instance.StderrLevel.Validate()
	}
	return err
}

func (instance *Config) init() {
	values.SetDefaultsTo(defaults, instance)
}

// BeforeUnmarshalYAML is used until yaml unmarshalling. Do not call this method directly.
func (instance *Config) BeforeUnmarshalYAML() error {
	instance.init()
	return nil
}
