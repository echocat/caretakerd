import org.echocat.gradle.plugins.golang.tasks.*
import org.echocat.gradle.plugins.golang.utils.Executor
import org.echocat.gradle.plugins.golang.model.Platform

/*plugins {
    id 'org.echocat.golang' version '0.1.7'
}*/

apply plugin: 'org.echocat.golang'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.echocat.gradle.plugins:gradle-golang-plugin:0.1.8-SNAPSHOT"
    }
}

group 'github.com/echocat/caretakerd'

dependencies {
    build 'github.com/eknkc/dateformat'
    build 'github.com/emicklei/go-restful'
    build 'gopkg.in/blaubaer/goyaml.v66'
    build 'gopkg.in/natefinch/lumberjack.v2'
    build 'gopkg.in/robfig/cron.v2'
    build 'github.com/urfave/cli'
    build 'gopkg.in/jmcvetta/napping.v3'
    build 'github.com/russross/blackfriday'
    build 'github.com/tdewolff/minify'
    build 'gopkg.in/check.v1'

    test 'github.com/stretchr/testify'
}

golang {
    // Overwritable via -Dplatforms=<..>
    platforms = System.getProperty("platforms", "linux-386,linux-amd64,windows-386,windows-amd64,darwin-amd64")
    build {
        useTemporaryGopath = true
        definitions = [
                "main.packageName": group,
                "main.version": version,
        ]
    }
}

task buildManual(
        type: GolangTask,
        dependsOn: ["buildManualGeneratorBinaries"],
        description: "Assembles manual for caretakerd.",
        group: "build"
) {
    action {
        // Build manual to caretakerd.html (for Linux and macOS)
        Executor.executor("${project.buildDir}/out/caretakerd-manual-generator${build.currentPlatformExtension}", logger)
                .arguments("${project.group}", "${project.buildDir}/out/caretakerd.html")
                .env("GOOS", "linux")
                .env("GOROOT", toolchain.goroot)
                .env("GOPATH", build.gopath)
                .execute()

        // Build manual to caretakerd-windows.html (for Windows)
        Executor.executor("${project.buildDir}/out/caretakerd-manual-generator${build.currentPlatformExtension}", logger)
                .arguments("${project.group}", "${project.buildDir}/out/caretakerd-windows.html")
                .env("GOOS", "windows")
                .env("GOROOT", toolchain.goroot)
                .env("GOPATH", build.gopath)
                .execute()
    }
}

task buildManualGeneratorBinaries(
        type: BuildTask,
        description: "Assembles the manual generator binaries used to generate the manual of this project with it.",
        group: "build"
) {
    golang {
        // Pin to current platform because this build is only required one time on this machine
        platforms = Platform.currentPlatform()
        // Manual sources are located in manual sub directory
        packageName = "${project.group}/manual"
        build {
            outputFilenamePattern = "${project.buildDir}/out/caretakerd-manual-generator%{extension}"
        }
    }
}

build.dependsOn("buildManual")
