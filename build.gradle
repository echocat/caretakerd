import org.echocat.gradle.plugins.golang.tasks.*
import org.echocat.gradle.plugins.golang.utils.Executor
import org.echocat.gradle.plugins.golang.model.Platform

plugins {
    id 'org.echocat.golang' version '0.1.10'
    id 'net.researchgate.release' version '2.4.0'
    id 'co.riiid.gradle' version '0.4.2'
}

/*apply plugin: 'org.echocat.golang'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.echocat.gradle.plugins:gradle-golang-plugin:0.1.11-SNAPSHOT"
    }
}*/

group 'github.com/echocat/caretakerd'

dependencies {
    build 'github.com/eknkc/dateformat'
    build 'github.com/emicklei/go-restful'
    build 'gopkg.in/blaubaer/goyaml.v66'
    build 'gopkg.in/natefinch/lumberjack.v2'
    build 'gopkg.in/robfig/cron.v2'
    build 'github.com/urfave/cli'
    build 'gopkg.in/jmcvetta/napping.v3'
    build 'github.com/russross/blackfriday'
    build 'github.com/tdewolff/minify'
    build 'gopkg.in/check.v1'

    test 'github.com/stretchr/testify'
}

golang {
    // Overwritable via -Dplatforms=<..>
    platforms = System.getProperty("platforms", "linux-386,linux-amd64,windows-386,windows-amd64,darwin-amd64")
    build {
        useTemporaryGopath = true
        definitions = [
                "main.packageName": group,
                "main.version": version,
        ]
    }
}

task buildManual(
        type: GolangTask,
        dependsOn: ["buildManualGeneratorBinaries"],
        description: "Assembles manual for caretakerd.",
        group: "build"
) {
    action {
        Executor.executor("${project.buildDir}/out/${project.name}-manual-generator${build.currentPlatformExtension}", logger)
                .arguments("${project.group}", "${project.buildDir}/docs/${project.name}.html")
                .env("GOOS", "linux")
                .env("GOROOT", toolchain.goroot)
                .env("GOPATH", build.gopath)
                .execute()
        println("${project.buildDir}/docs/${project.name}.html build.")

        Executor.executor("${project.buildDir}/out/${project.name}-manual-generator${build.currentPlatformExtension}", logger)
                .arguments("${project.group}", "${project.buildDir}/docs/${project.name}-windows.html")
                .env("GOOS", "windows")
                .env("GOROOT", toolchain.goroot)
                .env("GOPATH", build.gopath)
                .execute()
        println("${project.buildDir}/docs/${project.name}-windows.html build.")
    }
}

task buildManualGeneratorBinaries(
        type: BuildTask,
        description: "Assembles the manual generator binaries used to generate the manual of this project with it.",
        group: "build"
) {
    golang {
        // Pin to current platform because this build is only required one time on this machine
        platforms = Platform.currentPlatform()
        // Manual sources are located in manual sub directory
        packageName = "${project.group}/manual"
        build {
            outputFilenamePattern = "${project.buildDir}/out/${project.name}-manual-generator%{extension}"
        }
    }
}

baseBuild.golang.packageName = "${project.group}/main"
build.dependsOn("buildManual")

task "package"(
        group: "distribution",
        dependsOn: ["packageLinux386","packageLinuxAmd64","packageWindows386","packageWindowsAmd64","packageDarwinAmd64"]
)

task packageLinux386(
        type: Tar,
        group: "distribution",
        dependsOn: ["build"]
) {
    onlyIf = { golang.parsedPlatforms.contains(Platform.LINUX_X86) }
    destinationDir = new File("${project.buildDir}/distribution")
    compression = Compression.GZIP
    baseName = project.name
    appendix = 'linux-386'
    extension = 'tar.gz'

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-linux-386")
        rename("${project.name}-linux-386", "caretakerd")
        fileMode = 755
    }

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-linux-386")
        rename("${project.name}-linux-386", "caretakerctl")
        fileMode = 755
    }

    from("${project.buildDir}/docs") {
        into("/")
        include("${project.name}.html")
        rename("${project.name}.html", "caretakerd.html")
    }
}

task packageLinuxAmd64(
        type: Tar,
        group: "distribution",
        dependsOn: ["build"]
) {
    onlyIf = { golang.parsedPlatforms.contains(Platform.LINUX_AMD64) }
    destinationDir = new File("${project.buildDir}/distribution")
    compression = Compression.GZIP
    baseName = project.name
    appendix = 'linux-amd64'
    extension = 'tar.gz'

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-linux-amd64")
        rename("${project.name}-linux-amd64", "caretakerd")
        fileMode = 755
    }

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-linux-amd64")
        rename("${project.name}-linux-amd64", "caretakerctl")
        fileMode = 755
    }

    from("${project.buildDir}/docs") {
        into("/")
        include("${project.name}.html")
        rename("${project.name}.html", "caretakerd.html")
    }
}

task packageWindows386(
        type: Zip,
        group: "distribution",
        dependsOn: ["build"]
) {
    onlyIf = { golang.parsedPlatforms.contains(Platform.LINUX_X86) }
    destinationDir = new File("${project.buildDir}/distribution")
    baseName = project.name
    appendix = 'windows-386'

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-windows-386.exe")
        rename("${project.name}-windows-386.exe", "caretakerd.exe")
        fileMode = 755
    }

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-windows-386.exe")
        rename("${project.name}-windows-386.exe", "caretakerctl.exe")
        fileMode = 755
    }

    from("${project.buildDir}/docs") {
        into("/")
        include("${project.name}.html")
        rename("${project.name}.html", "caretakerd.html")
    }
}

task packageWindowsAmd64(
        type: Zip,
        group: "distribution",
        dependsOn: ["build"]
) {
    onlyIf = { golang.parsedPlatforms.contains(Platform.LINUX_AMD64) }
    destinationDir = new File("${project.buildDir}/distribution")
    baseName = project.name
    appendix = 'windows-amd64'

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-windows-amd64.exe")
        rename("${project.name}-windows-amd64.exe", "caretakerd.exe")
        fileMode = 755
    }

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-windows-amd64.exe")
        rename("${project.name}-windows-amd64.exe", "caretakerctl.exe")
        fileMode = 755
    }

    from("${project.buildDir}/docs") {
        into("/")
        include("${project.name}-windows.html")
        rename("${project.name}-windows.html", "caretakerd.html")
    }
}

task packageDarwinAmd64(
        type: Tar,
        group: "distribution",
        dependsOn: ["build"]
) {
    onlyIf = { golang.parsedPlatforms.contains(Platform.DARWIN_AMD64) }
    destinationDir = new File("${project.buildDir}/distribution")
    compression = Compression.GZIP
    baseName = project.name
    appendix = 'darwin-amd64'
    extension = 'tar.gz'

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-darwin-amd64")
        rename("${project.name}-darwin-amd64", "caretakerd")
        fileMode = 755
    }

    from("${project.buildDir}/out") {
        into("/")
        include("${project.name}-darwin-amd64")
        rename("${project.name}-darwin-amd64", "caretakerctl")
        fileMode = 755
    }

    from("${project.buildDir}/docs") {
        into("/")
        include("${project.name}.html")
        rename("${project.name}.html", "caretakerd.html")
    }
}


release {
    preTagCommitMessage = 'Preapre release of '
    tagCommitMessage = 'Release version '
    newVersionCommitMessage = 'Prepare next development version '
    tagTemplate = 'v${version}'
    buildTasks = ['package']
}
afterReleaseBuild.dependsOn("githubRelease")

github {
    owner = 'echocat'
    repo = name
    token = "${System.getenv('GITHUB_TOKEN')}"
    tagName = "v${version}"
    targetCommitish = 'master'
    name = version
    assets = [
            "${project.buildDir}/distribution/${project.name}-linux-386.tar.gz",
            "${project.buildDir}/distribution/${project.name}-linux-amd64.tar.gz",
            "${project.buildDir}/distribution/${project.name}-windows-386.zip",
            "${project.buildDir}/distribution/${project.name}-windows-amd64.zip",
            "${project.buildDir}/distribution/${project.name}-darwin-amd64.tar.gz",
            "${project.buildDir}/docs/${project.name}.html",
    ]
}
githubRelease.dependsOn("package")
